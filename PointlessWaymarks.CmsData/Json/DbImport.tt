<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>

using Microsoft.EntityFrameworkCore;
using Omu.ValueInjecter;
using PointlessWaymarks.CmsData.Database;
using PointlessWaymarks.CmsData.Database.Models;

namespace PointlessWaymarks.CmsData.Json
{
    public static partial class DbImport
    {
<#
    foreach (var loopTypeNames in
        new List<string> {"FileContent",  "GeoJsonContent", "ImageContent", "LineContent", "LinkContent", "NoteContent", "PhotoContent", "PostContent", "TrailContent", "VideoContent"})
    {
#>
    public static async Task <#= loopTypeNames #>ToDb(List<<#= loopTypeNames #>> toImport, IProgress<string>? progress = null)
    {
        progress?.Report("<#= loopTypeNames #> - Starting");

        if (!toImport.Any())
        {
            progress?.Report("No <#= loopTypeNames #> items to import...");
            return;
        }

        progress?.Report($"<#= loopTypeNames #> - Working with {toImport.Count} Entries");

        var db = await Db.Context();

        foreach (var loopImportItem in toImport)
        {
            progress?.Report($"{loopImportItem.Title} - Starting <#= loopTypeNames #>");

            var exactMatch = await db.<#= loopTypeNames #>s.AnyAsync(x =>
                x.ContentId == loopImportItem.ContentId && x.ContentVersion == loopImportItem.ContentVersion);

            if (exactMatch)
            {
                progress?.Report($"{loopImportItem.Title} - Found exact match in DB - skipping");
                continue;
            }

            var laterEntries = await db.<#= loopTypeNames #>s.AnyAsync(x =>
                x.ContentId == loopImportItem.ContentId && x.ContentVersion > loopImportItem.ContentVersion);

            if (laterEntries)
            {
                if (await db.Historic<#= loopTypeNames #>s.AnyAsync(x =>
                        x.ContentId == loopImportItem.ContentId && x.ContentVersion == loopImportItem.ContentVersion))
                {
                    progress?.Report(
                        $"{loopImportItem.Title} - Found later entry in Db and this entry already in Historic <#= loopTypeNames #>");
                }
                else
                {
                    progress?.Report(
                        $"{loopImportItem.Title} - Found later entry already in db - moving this version to Historic<#= loopTypeNames #>s");

                    var newHistoricEntry = new Historic<#= loopTypeNames #>();
                    newHistoricEntry.InjectFrom(loopImportItem);
                    newHistoricEntry.Id = 0;

                    db.Historic<#= loopTypeNames #>s.Add(newHistoricEntry);
                    await db.SaveChangesAsync(true);
                }

                continue;
            }

            await Db.Save<#= loopTypeNames #>(loopImportItem);
        }

        progress?.Report("<#= loopTypeNames #> - Finished");
    }
<#
    }
#>

<#
    foreach (var loopTypeNames in
        new List<string>
        {
            "HistoricFileContent",  "HistoricGeoJsonContent", "HistoricImageContent", "HistoricLineContent", "HistoricLinkContent", "HistoricNoteContent", "HistoricPhotoContent", "HistoricPostContent", "HistoricTrailContent", "HistoricVideoContent"
        })
    {
#>
    public static async Task <#= loopTypeNames #>ToDb(List<<#= loopTypeNames #>> toImport, IProgress<string>? progress = null)
    {
        progress?.Report("<#= loopTypeNames #> - Starting");

        if (!toImport.Any())
        {
            progress?.Report("No items to import?");
            return;
        }

        progress?.Report($"<#= loopTypeNames #> - Working with {toImport.Count} Entries");

        var db = await Db.Context();

        var currentLoop = 1;
        var totalCount = toImport.Count;

        foreach (var loopImportItem in toImport)
        {
            progress?.Report($"{loopImportItem.Title} - {currentLoop++} of {totalCount} - Id {loopImportItem.Id}");

            if (await db.<#= loopTypeNames #>s.AnyAsync(x =>
                    x.ContentId == loopImportItem.ContentId && x.ContentVersion == loopImportItem.ContentVersion))
            {
                progress?.Report($"Historic {loopImportItem.ContentVersion:r} {loopImportItem.Title} - Already Exists");
                continue;
            }

            loopImportItem.Id = 0;

            db.<#= loopTypeNames #>s.Add(loopImportItem);

            await db.SaveChangesAsync(true);
        }

        progress?.Report("<#= loopTypeNames #> - Finished");
    }
<#
    }
#>
    }
}