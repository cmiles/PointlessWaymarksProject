using System.Text;
using System.Web;
using System.Xml.Linq;
using PointlessWaymarks.CmsData.CommonHtml;
using PointlessWaymarks.CmsData.Database.Models;

namespace PointlessWaymarks.CmsData.Rss;

public static class RssBuilder
{
    public static XDocument RssDocument(string channelTitle, List<XElement> items)
    {
        var rssBuilder = new StringBuilder();
        var settings = UserSettingsSingleton.CurrentSettings();

        var rssElement = new XElement("rss", new XAttribute("version", "2.0"));
        var channel = new XElement("channel");
        rssElement.Add(channel);
        channel.Add(new XComment($"RSS generated by Pointless Waymarks CMS on {DateTime.Now:R}"));
        channel.Add(new XElement("title", channelTitle));
        channel.Add(new XElement("link", settings.SiteUrl()));
        channel.Add(new XElement("description", settings.SiteSummary));
        channel.Add(new XElement("language", "en-us"));
        channel.Add(new XElement("copyright", $"{DateTime.Now.Year} {settings.SiteAuthors}"));
        channel.Add(new XElement("lastBuildDate", DateTime.Now.ToString("R")));
        channel.Add(new XElement("generator", "Pointless Waymarks CMS"));
        channel.Add(new XElement("managingEditor", settings.SiteEmailTo));
        channel.Add(new XElement("webMaster", settings.SiteEmailTo));
        items.ForEach(x => channel.Add(x));

        return new XDocument(new XDeclaration("1.0", "utf-8", null), rssElement);
    }

    public static string RssFileString(string channelTitle, List<XElement> items)
    {
        var rssDoc = RssDocument(channelTitle, items);
        var rssMemoryStream = new MemoryStream();
        rssDoc.Save(rssMemoryStream);
        return Encoding.UTF8.GetString(rssMemoryStream.ToArray());
    }

    public static XElement RssItemString(string? title, string? link, string? author, string? content,
        DateTime createdOn,
        string contentId)
    {
        var item = new XElement("item");
        item.Add(new XElement("title", title));
        item.Add(new XElement("link", link));
        item.Add(new XElement("author", author));
        if (!string.IsNullOrWhiteSpace(content)) item.Add(new XElement("description", new XCData(content)));
        item.Add(new XElement("pubDate", createdOn.ToString("R")));
        var guidElement = new XElement("guid", contentId);
        guidElement.Add(new XAttribute("isPermaLink", false));
        item.Add(new XElement("guid", contentId));

        return item;
    }

    public static async void WriteContentCommonListRss(List<IContentCommon> content, FileInfo fileInfo,
        string titleAdd, IProgress<string>? progress = null)
    {
        var settings = UserSettingsSingleton.CurrentSettings();

        var items = new List<XElement>();

        progress?.Report($"Processing {content.Count} Content Entries to write to {titleAdd} RSS");

        foreach (var loopContent in content)
        {
            var contentUrl = await settings.ContentUrl(loopContent.ContentId).ConfigureAwait(false);

            string? itemDescription = null;

            if (loopContent.MainPicture != null)
            {
                var imageInfo = PictureAssetProcessing.ProcessPictureDirectory(loopContent.MainPicture.Value);

                if (imageInfo != null)
                    itemDescription =
                        $"{Tags.PictureImgTagDisplayImageOnly(imageInfo)}<p>{HttpUtility.HtmlEncode(loopContent.Summary)}</p>" +
                        $"<p>Read more at <a href=\"{contentUrl}\">{UserSettingsSingleton.CurrentSettings().SiteName}</a></p>";
            }

            if (string.IsNullOrWhiteSpace(itemDescription))
                itemDescription = $"<p>{HttpUtility.HtmlEncode(loopContent.Summary)}</p>" +
                                  $"<p>Read more at <a href=\"{contentUrl}\">{UserSettingsSingleton.CurrentSettings().SiteName}</a></p>";

            items.Add(RssItemString(loopContent.Title, $"{contentUrl}", Tags.CreatedByAndUpdatedByNameList(loopContent), itemDescription,
                loopContent.CreatedOn, loopContent.ContentId.ToString()));
        }

        progress?.Report($"Writing {titleAdd} RSS to {fileInfo.FullName}");

        if (fileInfo.Exists)
        {
            fileInfo.Delete();
            fileInfo.Refresh();
        }

        await FileManagement.WriteAllTextToFileAndLogAsync(fileInfo.FullName,
            RssFileString($"{UserSettingsSingleton.CurrentSettings().SiteName} - {titleAdd}",
                items), Encoding.UTF8).ConfigureAwait(false);
    }
}